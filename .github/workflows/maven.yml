# This workflow will build a Java project with Maven, and cache/restore any dependencies to improve the workflow execution time
# For more information see: https://docs.github.com/en/actions/automating-builds-and-tests/building-and-testing-java-with-maven

# This workflow uses actions that are not certified by GitHub.
# They are provided by a third-party and are governed by
# separate terms of service, privacy policy, and support
# documentation.

name: CICD Workflow ArosajAPI

on:
  push:
    branches: [ "master" ]
  pull_request:
    branches: [ "master" ]

jobs:
  docker:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - name: Set up JDK 17
        uses: actions/setup-java@v3
        with:
          java-version: '21'
          distribution: 'temurin'
          cache: maven
      - name: Build with Maven
        run: mvn -B package --file pom.xml
      -
        name: Set up QEMU
        uses: docker/setup-qemu-action@v3
      -
        name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
      -
        name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}
      -
        name: Build and push
        uses: docker/build-push-action@v5
        with:
          context: .
          push: true
          tags: lowinne/arosaj-server-image:latest
  deploy:
    needs: docker
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}
      - name: Set permissions for private key
        run: |
          echo "${{ secrets.AWS_PRIVATE_KEY }}" > ${{ secrets.AWS_PRIVATE_KEY_NAME }}.pem
          chmod 600 ${{ secrets.AWS_PRIVATE_KEY_NAME }}.pem
      - name: Pull Docker image
        run: |
          ssh -o StrictHostKeyChecking=no -i ${{ secrets.AWS_PRIVATE_KEY_NAME }}.pem ubuntu@ec2-13-39-86-184.eu-west-3.compute.amazonaws.com 'sudo docker pull lowinne/arosaj-server-image:latest'
      - name: Stop running container
        run: |
          ssh -o StrictHostKeyChecking=no -i ${{ secrets.AWS_PRIVATE_KEY_NAME }}.pem ubuntu@ec2-13-39-86-184.eu-west-3.compute.amazonaws.com 'sudo docker stop aroserver || true'
          ssh -o StrictHostKeyChecking=no -i ${{ secrets.AWS_PRIVATE_KEY_NAME }}.pem ubuntu@ec2-13-39-86-184.eu-west-3.compute.amazonaws.com 'sudo docker rm aroserver || true'
      - name: Run new container
        run: |
          ssh -o StrictHostKeyChecking=no -i ${{ env.AWS_PRIVATE_KEY_NAME }}.pem ubuntu@ec2-13-39-86-184.eu-west-3.compute.amazonaws.com 'sudo docker run -d --name aroserver -p 80:3000 lowinne/arosaj-server-image:latest'
